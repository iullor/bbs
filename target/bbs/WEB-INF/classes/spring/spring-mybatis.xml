<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--整合mybatis的xml文件-->
    <context:component-scan base-package="com.gyl.mapper">
        <!--排除Controller注解-->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--引入数据库相关信息的配置文件-->
    <context:property-placeholder location="classpath:db.properties"/>
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>

        <!--c3p0私有属性-->
        <property name="maxPoolSize" value="30"/>
        <property name="minPoolSize" value="10"/>
        <!--关闭连接后不自动commit-->
        <property name="autoCommitOnClose" value="false"/>
        <!--获取连接超时事件-->
        <property name="checkoutTimeout" value="100000"/>
        <!--当前连接失败重试次数-->
        <property name="acquireRetryAttempts" value="2"/>
    </bean>

    <!--最关键的异步，如何整合mybatis-->

    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--引入mappers文件-->
        <!--<property name="configLocation" value="classpath:mybatis-config.xml"/>-->
        <!--这就要求所有的mapper文件必须在com/omg/mapper路径-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
        <property name="configuration">
            <!--mybatis 下面的setting配置文件可以在下面的bean 中配置-->
            <bean class="org.apache.ibatis.session.Configuration">
                <!--驼峰命名法-->
                <property name="mapUnderscoreToCamelCase" value="true"/>
                <!--&lt;!&ndash;配置类的别名给mybatis识别，默认是类的首字母小写&ndash;&gt;-->
                <!--<property name="variables" value="com.omg.enity"/>-->
            </bean>
        </property>
        <!--可以配置mybatis的插件-->
        <property name="plugins">
            <!--可以配置多个插件-->
            <array>
                <!--1,分页的插件，拦截器实现分页的功能-->
                <bean class="com.github.pagehelper.PageInterceptor">
                    <!--这是这个插件的一些属性-->
                    <property name="properties">
                        <value>
                            helperDialect=mysql
                            reasonable=true
                            supportMethodArguments=true
                            params=count=countSql
                            autoRuntineDialect=true
                        </value>
                    </property>
                </bean>
                <!--2,,,-->
            </array>
        </property>
    </bean>

    <!--持久层接口
        需要去那个包下找接口生成实现类
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.gyl.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryBean"/>
    </bean>


    <!--  &lt;!&ndash;事务管理，使用数据源事务管理类来进行管理&ndash;&gt;
      <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
          &lt;!&ndash;使用c3p0的事务管理&ndash;&gt;
          <property name="dataSource" ref="dataSource"/>
      </bean>

      &lt;!&ndash;确定事务管理的策略， transaction-manager &ndash;&gt;
      <tx:advice transaction-manager="transactionManager" id="transactionAdvice">

          &lt;!&ndash;事务管理的相关值以及它的传播性&ndash;&gt;
          <tx:attributes>
              <tx:method name="select*" read-only="true"/>
              <tx:method name="get*" read-only="true"/>
              <tx:method name="query*" read-only="true"/>
              <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
              <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
              <tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>
              <tx:method name="add*" propagation="REQUIRED" rollback-for="Exception"/>
          </tx:attributes>
      </tx:advice>

      &lt;!&ndash;使用aop对事务管理的范围进行织入  明确几个点
          1，对那些地方需要进行事务管理 execution 书写 明确边界
          2，使用什么策略去管理，策略我们写在了 tx:advice 全部书写在其中，在我们aop的 advisor当中只需要引入这个事务管理者的建议即可
      &ndash;&gt;

      &lt;!&ndash;
          这里告诉spring 对那些包下的那些类中的那些方法进行事务管理， 事务管理引用第三方别人写好的即可
          aop 往自己的类中织入什么样的代码
      &ndash;&gt;
      <aop:config>
          <aop:pointcut id="pc1" expression="execution(* com.gyl.service..*.*())"/>
          <aop:advisor advice-ref="transactionAdvice" pointcut-ref="pc1"/>
      </aop:config>

      &lt;!&ndash;使用注解进行事务的管理&ndash;&gt;
      <tx:annotation-driven transaction-manager="transactionManager"/>-->

</beans>